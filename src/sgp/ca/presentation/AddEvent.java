/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sgp.ca.presentation;

import java.awt.Color;
import java.text.SimpleDateFormat;
import java.util.Date;
import sgp.ca.businesslogic.EventDao;
import sgp.ca.domain.Event;


/**
 *
 * @author Esteban
 */
public class AddEvent extends javax.swing.JFrame {

    /**
     * Creates new form AddEvent
     */
    public AddEvent() {
        initComponents();
        this.setLocation(380,200);
        jTDateRegister.setText(dateActual());
        jTDateRegister.setEditable(false);
        jLHour.setVisible(false);
        jLDateEvent.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTTitle = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTResponsable = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jCEvent = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jTDateRegister = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jTHour = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jTPlace = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jTDateEvent = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jTGuests = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLHour = new javax.swing.JLabel();
        jLDateEvent = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTTitle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTTitleActionPerformed(evt);
            }
        });
        jTTitle.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTTitleKeyTyped(evt);
            }
        });
        getContentPane().add(jTTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 90, 110, -1));

        jLabel2.setText("Titulo :");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, -1, -1));

        jLabel3.setText("Responsable : ");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 140, -1, -1));

        jTResponsable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTResponsableActionPerformed(evt);
            }
        });
        jTResponsable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTResponsableKeyTyped(evt);
            }
        });
        getContentPane().add(jTResponsable, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 130, 110, -1));

        jLabel4.setText("Tipo :");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 180, -1, -1));

        jCEvent.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Evento Colegiado", "Acividad Docente" }));
        getContentPane().add(jCEvent, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 170, 130, -1));

        jLabel5.setText("Fecha de Registro :");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 220, -1, -1));

        jTDateRegister.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTDateRegisterActionPerformed(evt);
            }
        });
        jTDateRegister.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTDateRegisterKeyReleased(evt);
            }
        });
        getContentPane().add(jTDateRegister, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 210, 110, -1));

        jLabel6.setText("Hora :");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 270, -1, -1));

        jTHour.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTHourKeyTyped(evt);
            }
        });
        getContentPane().add(jTHour, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 260, 110, -1));

        jLabel7.setText("Lugar :");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 310, -1, -1));

        jTPlace.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTPlaceKeyTyped(evt);
            }
        });
        getContentPane().add(jTPlace, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 310, 110, -1));

        jLabel8.setText("Fecha de evento :");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 90, -1, -1));
        getContentPane().add(jTDateEvent, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 80, 100, -1));

        jLabel9.setText("Invitados :");
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 140, -1, -1));

        jTGuests.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTGuestsKeyTyped(evt);
            }
        });
        getContentPane().add(jTGuests, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 140, 100, -1));

        jButton1.setText("Agendar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 340, -1, -1));

        jButton2.setText("Cancelar");
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 340, -1, -1));

        jLHour.setText("(La hora debe ir en formato hh:mm:ss)");
        getContentPane().add(jLHour, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 290, -1, -1));

        jLDateEvent.setText("(La fecha debe estar en el formato YYYY-MM-DD)");
        getContentPane().add(jLDateEvent, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 110, -1, -1));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sgp/ca/presentation/Images/calendarización.png"))); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -300, 550, 680));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTTitleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTTitleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTTitleActionPerformed

    private void jTResponsableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTResponsableActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTResponsableActionPerformed

    private void jTDateRegisterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTDateRegisterActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTDateRegisterActionPerformed

    private void jTDateRegisterKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTDateRegisterKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_jTDateRegisterKeyReleased

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        EventDao eventDao = new EventDao();
        String [] data = new String [8];
        int confirmation = 0;
        data = recoverData();
        Event event = new Event();
        if(data==null){
            
        }else{
           event = eventDao.createEvent(data);
            confirmation = eventDao.registerEvent(event);
            if(confirmation == 1){
                javax.swing.JOptionPane.showMessageDialog(this,"Evento registrado con éxito \n","Evento Registrado",javax.swing.JOptionPane.INFORMATION_MESSAGE);
            }else{
                javax.swing.JOptionPane.showMessageDialog(this,"No se puede registrar en este momento, intentelo más tarde \n","Evento No Registrado",javax.swing.JOptionPane.INFORMATION_MESSAGE);
            } 
        }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTTitleKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTTitleKeyTyped
        char valide = evt.getKeyChar();
        if((valide<'a'|| valide>'z') && (valide<'A'||valide>'Z') &&(valide<' ' || valide>' '))evt.consume();
    }//GEN-LAST:event_jTTitleKeyTyped

    private void jTResponsableKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTResponsableKeyTyped
        char valide = evt.getKeyChar();
        if((valide<'a'|| valide>'z') && (valide<'A'||valide>'Z') &&(valide<' ' || valide>' '))evt.consume();
    }//GEN-LAST:event_jTResponsableKeyTyped

    private void jTPlaceKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTPlaceKeyTyped
        char valide = evt.getKeyChar();
        if((valide<'a'|| valide>'z') && (valide<'A'||valide>'Z') &&(valide<' ' || valide>' '))evt.consume();
    }//GEN-LAST:event_jTPlaceKeyTyped

    private void jTGuestsKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTGuestsKeyTyped
        char valide = evt.getKeyChar();
        if((valide<'a'|| valide>'z') && (valide<'A'||valide>'Z') &&(valide<' ' || valide>' '))evt.consume();
    }//GEN-LAST:event_jTGuestsKeyTyped

    private void jTHourKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTHourKeyTyped

    }//GEN-LAST:event_jTHourKeyTyped
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddEvent.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddEvent.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddEvent.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddEvent.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddEvent().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox<String> jCEvent;
    private javax.swing.JLabel jLDateEvent;
    private javax.swing.JLabel jLHour;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField jTDateEvent;
    private javax.swing.JTextField jTDateRegister;
    private javax.swing.JTextField jTGuests;
    private javax.swing.JTextField jTHour;
    private javax.swing.JTextField jTPlace;
    private javax.swing.JTextField jTResponsable;
    private javax.swing.JTextField jTTitle;
    // End of variables declaration//GEN-END:variables

    public static String dateActual(){
        Date date = new Date();
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-mm-dd");
        
        return simpleDateFormat.format(date);
    }
    
    public String[] recoverData(){
        String [] data = new String [8];
        if(valideData()==false){
            data [0] = jTTitle.getText();
            data [1] = jTResponsable.getText();
            data [2] = (String) jCEvent.getSelectedItem();
            data [3] = jTDateRegister.getText();
            data [4] = jTHour.getText();
            data [5] = jTPlace.getText();
            data [6] = jTDateEvent.getText();
            data [7] = jTGuests.getText();
        }else{
            data = null;
        }  
        return data;
    }
    
    public boolean valideData(){
        boolean valide = false;
        if(jTTitle.getText().equals("")){
            jTTitle.setBackground(Color.red);
            valide = true;
        }else{
            jTTitle.setBackground(Color.white);
        }
        if(jTResponsable.getText().equals("")){
            jTResponsable.setBackground(Color.red);
            valide = true;
        }else{
            jTResponsable.setBackground(Color.white);
        }
        if(jTDateRegister.getText().equals("")){
            jTDateRegister.setBackground(Color.red);
            valide = true;
        }else{
            jTDateRegister.setBackground(Color.white);
        }
        if(jTHour.getText().equals("")){
            jTHour.setBackground(Color.red);
            jLHour.setVisible(true);
            valide = true;
        }else{
            if(valideHour()==true){
                jTHour.setBackground(Color.white);
                jLHour.setVisible(false);
            }else{
                jTHour.setBackground(Color.red);
                jLHour.setVisible(true);
                valide = true;
            }
        }
        if(jTPlace.getText().equals("")){
            jTPlace.setBackground(Color.red);
            jLDateEvent.setVisible(true);
            valide = true;
        }else{
            jTPlace.setBackground(Color.white);
        }
        if(jTDateEvent.getText().equals("")){
            jTDateEvent.setBackground(Color.red);
            valide = true;
        }else{
            if(valideDate()==true){
                jTDateEvent.setBackground(Color.white);
                jLDateEvent.setVisible(false);
            }else{
                jTDateEvent.setBackground(Color.red);
                valide = true;
            }
            
        }
        if(jTGuests.getText().equals("")){
            jTGuests.setBackground(Color.red);
            valide = true;
        }else{
            jTGuests.setBackground(Color.white);
        }
        
        return valide;
    }
    
    public boolean valideHour(){
        boolean valide = false;
        String hourText = jTHour.getText();
        char [] hour = new char [8];
        try{
            for(int i = 0;i<8;i++){
            hour[i]=hourText.charAt(i);
            }
        }catch(StringIndexOutOfBoundsException ex){
         jLHour.setVisible(true);
        }
        valide = valideHourNumber(hour);
        return valide;
    }

    private boolean valideHourNumber(char [] hour) {
        boolean valide = false;
        int hour1 = Character.getNumericValue(hour[0]);
        int hour2 = Character.getNumericValue(hour[1]);
        int hour3 = Character.getNumericValue(hour[3]);
        int hour4 = Character.getNumericValue(hour[4]);
        int hour5 = Character.getNumericValue(hour[6]);
        int hour6 = Character.getNumericValue(hour[7]);
        if(comprobationNumber(hour1) == true && comprobationNumber(hour2) == true && comprobationNumber(hour3) == true && comprobationNumber(hour4) == true && comprobationNumber(hour5) == true && comprobationNumber(hour6) == true && hour[2]==':' && hour[5]==':'){
            valide = true;
        }
        return valide;
    }

    private boolean comprobationNumber(int hour){
        boolean confirmation = false;
        for(int i=0;i<=9;i++){
            if(hour==i){
                confirmation = true;
            }
        }
        return confirmation;
    }
    
    public boolean valideDate(){
        String date = jTDateEvent.getText();
        boolean valide = false;
        char [] dateAux = new char [10];
        try{
            for(int i=0;i<10;i++){
            dateAux[i]=date.charAt(i);
            }
        }catch(StringIndexOutOfBoundsException ex){
         jLDateEvent.setVisible(true);
        }
        
        valide = valideDateNumber(dateAux);
        return valide;
    }

    private boolean valideDateNumber(char [] date){
        boolean valide = false;
        int dateNumber1 = Character.getNumericValue(date[0]);
        int dateNumber2 = Character.getNumericValue(date[1]);
        int dateNumber3 = Character.getNumericValue(date[2]);
        int dateNumber4 = Character.getNumericValue(date[3]);
        int dateNumber5 = Character.getNumericValue(date[5]);
        int dateNumber6 = Character.getNumericValue(date[6]);
        int dateNumber7 = Character.getNumericValue(date[8]);
        int dateNumber8 = Character.getNumericValue(date[9]);
        if(comprobationNumber(dateNumber1)==true && comprobationNumber(dateNumber2)==true && comprobationNumber(dateNumber3)==true && comprobationNumber(dateNumber4)==true && comprobationNumber(dateNumber5)==true && comprobationNumber(dateNumber6)==true && comprobationNumber(dateNumber7)==true && comprobationNumber(dateNumber8)==true && date[4]=='-' && date[7]=='-'){
            valide = true;
        }
        return valide;
    }
}
